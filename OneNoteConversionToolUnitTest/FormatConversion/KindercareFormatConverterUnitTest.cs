using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Xml.Linq;
using Microsoft.Office.Interop.Word;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using OneNoteConversionTool.FormatConversion;
using OneNoteConversionTool.OutputGenerator;
using _WordApplication = Microsoft.Office.Interop.Word._Application;
using _WordDocument = Microsoft.Office.Interop.Word._Document;

namespace OneNoteConversionToolUnitTest.FormatConversion
{
	/// <summary>
	/// Unit Test for KindercareFormatConverter
	/// </summary>
	[TestClass]
	public class KindercareFormatConverterUnitTest
	{
		//Page titles of the generated word document
		private static List<string> pageTitles = new List<string>() { "Table of Contents", "Users Content Table", "First", "Second", "Last" };

		private const string NotebookName = "Kindercare";
		private const string TestDocName = "KindercareTest.docx";
		private static readonly string TestDocPath = Path.Combine(Utility.TempFolder, TestDocName);
		private static string _mNotebookId = String.Empty;
		private static XNamespace _mXmlNs;
		private static OneNoteGenerator _mOnGenerator;

		/// <summary>
		/// Create temporary folders and initialize OneNote Generator
		/// </summary>
		[ClassInitialize()]
		public static void MyClassInitialize(TestContext testContext)
		{
			if (!Directory.Exists(Utility.RootFolder))
			{
				Directory.CreateDirectory(Utility.RootFolder);
			}
			if (!Directory.Exists(Utility.TempFolder))
			{
				Directory.CreateDirectory(Utility.TempFolder);
			}
			_mXmlNs = Utility.NS;
			_mOnGenerator = new OneNoteGenerator(Utility.RootFolder);

			//Get Id of the test notebook so we chould retrieve generated content
			//KindercareFormatConverter will create notebookName as Kindercare
			_mNotebookId = _mOnGenerator.CreateNotebook(NotebookName);

			// used to generate a test docx
			var word = new Application();
			var doc = word.Application.Documents.Add();

			//construct "table of content" page
			//skip the first one, which will be generated by converter
			foreach(var s in pageTitles.Skip(1))
			{
				doc.Content.Text += s;
			}

			//construct other pages
			for (int i = 2; i < pageTitles.Count; i++)
			{
				doc.Words.Last.InsertBreak(WdBreakType.wdPageBreak);
				doc.Content.Text += pageTitles[i];
				doc.Content.Text += "this is a sample page";
			}

			//save the docx as a temporary file
			var fileFullPath = TestDocPath as object;
            doc.SaveAs(ref fileFullPath);
            ((_WordDocument)doc).Close();
            ((_WordApplication)word).Quit();
		}

		/// <summary>
		/// Delete temporary folders
		/// </summary>
		[ClassCleanup()]
		public static void MyClassCleanup() 
		{
			//delete temporary folders
			if (Directory.Exists(Utility.RootFolder))
			{
				Utility.DeleteDirectory(Utility.RootFolder);
			}
			if (Directory.Exists(Utility.NonExistentOutputPath))
			{
				Utility.DeleteDirectory(Utility.NonExistentOutputPath);
			}
		}

		/// <summary>
		/// Validate the conversion of a simple word document
		/// </summary>
		[TestMethod]
		public void ValidateWordConversion()
		{
			//convert the docx
			var converter = new KindercareFormatConverter();
			converter.ConvertWordToOneNote(TestDocPath, Utility.RootFolder);

			//retrieve the xml of generated notebook (OneNote.HierarchyScope.hsPages)
			var xmlDoc = _mOnGenerator.GetPageScopeHierarchy(_mNotebookId);
			Assert.IsNotNull(xmlDoc);

			XDocument xdoc = XDocument.Parse(xmlDoc);
			//get all the page xml
			var extractedPageTitles = xdoc.Descendants(_mXmlNs + "Page").Select(page => page.Attribute("name").Value).ToList();

			CollectionAssert.AreEqual(pageTitles, extractedPageTitles);
		}

		/// <summary>
		/// When the input file doesn't exist,
		/// word failed to open it and throw a COMException
		/// </summary>
		[TestMethod]
		[ExpectedException(typeof(COMException))]
		public void ValidateNonExistFileConversion()
		{
			var inputFile = Utility.NonExistentInputFile;
			var converter = new KindercareFormatConverter();
			converter.ConvertWordToOneNote(inputFile, Utility.RootFolder);
		}

		/// <summary>
		/// When the output folder don't exist
		/// it should work without throwing any exceptions
		/// </summary>
		[TestMethod]
		public void ValidateNonExistOutputFolder()
		{
			var outputDir = Utility.NonExistentOutputPath;
			var converter = new KindercareFormatConverter();
			converter.ConvertWordToOneNote(TestDocPath, outputDir);
		}
	}
}
